/// <reference path="../../../../node_modules/@nativescript/types-ios/index.d.ts" />
// This file is autogenerated, but has been manually stripped to the AV SDK's public interface.
// Please inspect the diff and drop unnecessary declarations when updating.
declare const enum AVKAttestationMode {
	None = 0,
	Managed = 1,
	CMS = 2
}
interface AVKBrandingDelegate extends NSObjectProtocol {
	colorNamedCompatibleWithTraitCollection?(name: string, traitCollection: UITraitCollection): UIColor|null;
	dataNamed?(name: string): NSDataAsset|null;
	fontWithDescriptorSize?(fontDescriptor: UIFontDescriptor, pointSize: number): UIFont|null;
	imageNamedCompatibleWithTraitCollection?(name: string, traitCollection: UITraitCollection): UIImage|null;
}
declare var AVKBrandingDelegate: {
	prototype: AVKBrandingDelegate;
}
declare class AVKCampaignScanFlow extends NSObject implements AVKScanViewControllerDelegate {
	appStoreURL: NSURL;
	delegate: AVKCampaignScanFlowDelegate;
	isAuthenticResultAutoContinueEnabled: boolean;
	scanViewControllerReadyToScan(controller: AVKScanViewController): void;
	scanViewControllerScanDidCompleteWithResult(controller: AVKScanViewController, result: AVKScanResult): void;
	scanViewControllerScanWillCompleteWithResult(controller: AVKScanViewController, result: AVKScanResult): void;
	scanViewControllerScanningLabel(controller: AVKScanViewController, SLID: string): void;
	scanViewControllerUnrecoverableError(controller: AVKScanViewController, error: NSError): void;
}
interface AVKCampaignScanFlowDelegate extends NSObjectProtocol {
	campaignScanFlowContactRequest?(scanCampaignFlow: AVKCampaignScanFlow): void;
	campaignScanFlowGuideRequest?(scanCampaignFlow: AVKCampaignScanFlow): void;
}
declare var AVKCampaignScanFlowDelegate: {
	prototype: AVKCampaignScanFlowDelegate;
}
declare class AVKCompatibility extends NSObject {
	static compatibilityLevelForConfig(config: AVKScanConfig): AVKCompatibilityLevel;
	static isAttestationSupported(): boolean;
	static isAttestationSupportedForConfig(config: AVKScanConfig): boolean;
	static isDeviceCompatible(): boolean;
}
declare const enum AVKCompatibilityLevel {
	Incompatible = 0,
	Limited = 1,
	Full = 2
}
declare const enum AVKCoreAuthenticationResult {
	Authentic = 1,
	Counterfeit = 2,
	ContradictingEvidence = 3,
	Standard2DCode = 4,
	UnsupportedLabel = 5,
	Timeout = 6,
	Other = 7
}
declare const enum AVKCoreCodeRawType {
	Undefined = 0,
	QR = 1,
	DM = 2
}
declare class AVKEndpointConfig extends NSObject implements NSCopying {
	static endpointConfigFromPlistAtPath(path: string): AVKEndpointConfig;
	static endpointConfigNamed(name: string): AVKEndpointConfig;
	apiKey: string;
	readonly isComplete: boolean;
	name: string;
	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
}
declare const enum AVKLabelLayout {
	Generic = 0,
	Horizontal = 1,
	Vertical = 2
}
declare const enum AVKLabelType {
	Generic = 0,
	QTag = 1,
	DTag = 2,
	UTagGeneric = 3,
	UTagQR = 4,
	UTagDM = 5
}
declare const enum AVKScanCampaignAction {
	Undefined = 0,
	Skip = 1,
	InAppBrowser = 2,
	InAppVideo = 3,
	OpenSafari = 4
}
declare class AVKScanConfig extends NSObject implements NSCopying {
	static defaultScanConfig(): AVKScanConfig;
	apiKey: string;
	attestationCert: string;
	attestationMode: AVKAttestationMode;
	brandingBundle: NSBundle;
	brandingDelegate: AVKBrandingDelegate;
	design: AVKScanDesign;
	endpointConfig: AVKEndpointConfig; // private
	feedback: AVKScanFeedback;
	includeGeoLocationData: boolean;
	labelLayout: AVKLabelLayout;
	labelType: AVKLabelType;
	locale: string;
	showDebugViews: boolean;
	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;
	prepareToScan(): void;
}
declare const enum AVKScanDesign {
	GenericScanAssist = 0,
	GenericManual = 1,
	ChequeCard = 2,
	Classic = 3
}
declare const enum AVKScanError {
	Unknown = 0,
	Config = 1,
	Network = 2,
	CameraUnavailable = 3,
	Outdated = 4,
	InvalidAPIKey = 5,
	PolicyViolation = 6
}
declare var AVKScanErrorComponentKey: string;
declare var AVKScanErrorDomain: string;
declare var AVKScanErrorServerMessageKey: string;
declare const enum AVKScanFeedback {
	Visual = 1,
	Acoustic = 2,
	Haptic = 4
}
declare class AVKScanResult extends NSObject {
	SLID: string;
	attestationToken: string;
	authResult: AVKCoreAuthenticationResult;
	readonly authentic: boolean;
	campaignAction: AVKScanCampaignAction;
	campaignURL: NSURL;
	codeRawData: NSData;
	readonly codeRawText: string;
	codeRawType: AVKCoreCodeRawType;
	resultAction: AVKScanResultAction;
	resultURL: NSURL;
	sessionID: string;
}
declare const enum AVKScanResultAction {
	Undefined = 0,
	Skip = 1,
	Static = 2,
	URL = 3
}
declare class AVKScanViewController extends UIViewController {
	static scanViewControllerWithDelegateConfigError(delegate: AVKScanViewControllerDelegate, config: AVKScanConfig): AVKScanViewController;
	static scanViewControllerWithDelegateError(delegate: AVKScanViewControllerDelegate): AVKScanViewController;
	config: AVKScanConfig;
	delegate: AVKScanViewControllerDelegate;
	leadingItemView: UIStackView;
	restartScanSession(): void;
	startScanSession(): void;
	stopScanSession(): void;
}
interface AVKScanViewControllerDelegate extends NSObjectProtocol {
	scanViewControllerReadyToScan?(controller: AVKScanViewController): void;
	scanViewControllerScanDidCompleteWithResult(controller: AVKScanViewController, result: AVKScanResult): void;
	scanViewControllerScanWillCompleteWithResult?(controller: AVKScanViewController, result: AVKScanResult): void;
	scanViewControllerScanningLabel?(controller: AVKScanViewController, SLID: string): void;
	scanViewControllerUnrecoverableError(controller: AVKScanViewController, error: NSError): void;
}
declare var AVKScanViewControllerDelegate: {
	prototype: AVKScanViewControllerDelegate;
}
declare class AVKVersionInfo extends NSObject {
	static coreBuildHost(): string;
	static coreBuildInformation(): string;
	static coreGitHash(): string;
	static coreThirdPartyLicenses(): string;
	static coreVersion(): string;
	static sdkBuildNum(): string;
	static sdkGitHash(): string;
	static sdkVersion(): string;
}
declare var AuthenticVisionSDKVersionNumber: number;
declare var AuthenticVisionSDKVersionString: interop.Reference<number>;
declare var kAVKScanErrorComponentAVAS: string;
declare var kAVKScanErrorComponentCore: string;
